{"is_source_file": true, "format": "Python", "description": "This file defines a JiraService class that provides methods to interact with Jira's REST API, including functions to test the connection, retrieve user information, projects, project details, issue types, and validate access.", "external_files": ["requests", "requests.auth", "logging"], "external_methods": ["requests.get", "logger.error"], "published": ["JiraService"], "classes": [{"name": "JiraService", "description": "Service class for interacting with Jira API"}], "methods": [{"name": "__init__(self, jira_domain: str, email: str, api_token: str)", "description": "Initializes JiraService with Jira domain, user email, and API token, setting up base URL and authorization headers.", "scope": "JiraService", "scopeKind": "class"}, {"name": "bool test_connection(self)", "description": "Tests if the Jira connection is valid by checking the '/rest/api/3/myself' endpoint.", "scope": "JiraService", "scopeKind": "class"}, {"name": "Optional[Dict] get_user_info(self)", "description": "Retrieves information about the current user from Jira.", "scope": "JiraService", "scopeKind": "class"}, {"name": "List[Dict] get_projects(self)", "description": "Fetches all projects accessible to the user.", "scope": "JiraService", "scopeKind": "class"}, {"name": "Optional[Dict] get_project_details(self, project_key: str)", "description": "Retrieves detailed information about a specific project given its key.", "scope": "JiraService", "scopeKind": "class"}, {"name": "List[Dict] get_issue_types_for_project(self, project_key: str)", "description": "Gets all issue types for a specific project.", "scope": "JiraService", "scopeKind": "class"}, {"name": "List[Dict] get_all_issue_types(self)", "description": "Retrieves all issue types available in Jira.", "scope": "JiraService", "scopeKind": "class"}, {"name": "bool validate_project_access(self, project_key: str)", "description": "Checks if the user has access to a specific project.", "scope": "JiraService", "scopeKind": "class"}], "calls": ["requests.get", "logger.error"], "search-terms": ["JiraService", "REST API", "jira_domain", "issue types", "project details"], "state": 2, "file_id": 8, "knowledge_revision": 17, "git_revision": "", "ctags": [{"_type": "tag", "name": "JiraService", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^class JiraService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def __init__(self, jira_domain: str, email: str, api_token: str):$/", "language": "Python", "kind": "member", "signature": "(self, jira_domain: str, email: str, api_token: str)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "get_all_issue_types", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def get_all_issue_types(self) -> List[Dict]:$/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "member", "signature": "(self)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "get_issue_types_for_project", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def get_issue_types_for_project(self, project_key: str) -> List[Dict]:$/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "member", "signature": "(self, project_key: str)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "get_project_details", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def get_project_details(self, project_key: str) -> Optional[Dict]:$/", "language": "Python", "typeref": "typename:Optional[Dict]", "kind": "member", "signature": "(self, project_key: str)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "get_projects", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def get_projects(self) -> List[Dict]:$/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "member", "signature": "(self)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "get_user_info", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def get_user_info(self) -> Optional[Dict]:$/", "language": "Python", "typeref": "typename:Optional[Dict]", "kind": "member", "signature": "(self)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def test_connection(self) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self)", "scope": "JiraService", "scopeKind": "class"}, {"_type": "tag", "name": "validate_project_access", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/jira_service.py", "pattern": "/^    def validate_project_access(self, project_key: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, project_key: str)", "scope": "JiraService", "scopeKind": "class"}], "hash": "acb7e9fb7335e03a5b76bed5c570ddfe", "format-version": 4, "code-base-name": "jira_syncer_backend", "filename": "jira_syncer_backend/src/jira_service.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"17": ""}]}