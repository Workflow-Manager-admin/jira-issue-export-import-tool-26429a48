{"is_source_file": true, "format": "Python", "description": "This source file defines an AuthService class responsible for handling authentication, session management, and integration with Jira APIs within the project. It includes methods for generating tokens, encrypting/decrypting sensitive data, user authentication via Jira, session retrieval, refresh, invalidation, and cleanup of expired sessions.", "external_files": ["models", "jira_service"], "external_methods": ["secrets.token_urlsafe", "hashlib (imported but not used)", "datetime.utcnow", "datetime.timedelta", "os.getenv", "cryptography.fernet.Fernet", "sqlalchemy.orm.Session"], "published": ["AuthService"], "classes": [{"name": "AuthService", "description": "Service class for authentication and session management"}], "methods": [{"name": "str generate_session_token(self)", "description": "Generate a secure session token", "scope": "AuthService", "scopeKind": "class"}, {"name": "str encrypt_token(self, token: str)", "description": "Encrypt the Jira API token for secure storage", "scope": "AuthService", "scopeKind": "class"}, {"name": "str decrypt_token(self, encrypted_token: str)", "description": "Decrypt the Jira API token", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,Optional[str],Optional[str]] authenticate_user(self, jira_email: str, jira_token: str, jira_domain: str, db: Session)", "description": "Authenticate user with Jira and create session", "scope": "AuthService", "scopeKind": "class"}, {"name": "Optional[UserSession] get_session(self, session_token: str, db: Session)", "description": "Get active session by token", "scope": "AuthService", "scopeKind": "class"}, {"name": "bool refresh_session(self, session_token: str, db: Session)", "description": "Refresh session expiration time", "scope": "AuthService", "scopeKind": "class"}, {"name": "bool invalidate_session(self, session_token: str, db: Session)", "description": "Invalidate a session", "scope": "AuthService", "scopeKind": "class"}, {"name": "JiraService get_jira_service(self, session: UserSession)", "description": "Get Jira service instance for a session", "scope": "AuthService", "scopeKind": "class"}, {"name": "int cleanup_expired_sessions(self, db: Session)", "description": "Clean up expired sessions and return count of cleaned sessions", "scope": "AuthService", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "AuthService", "scopeKind": "class", "description": "unavailable"}], "calls": ["secrets.token_urlsafe", "Fernet.generate_key", "Fernet", "os.getenv", "JiraService", "datetime.utcnow", "datetime.timedelta", "db.query", "db.commit", "db.add", "db.update"], "search-terms": ["AuthService", "session_token", "encryption_key", "JiraService", "UserSession", "encrypt_token", "decrypt_token", "authenticate_user"], "state": 2, "file_id": 9, "knowledge_revision": 19, "git_revision": "", "ctags": [{"_type": "tag", "name": "AuthService", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^class AuthService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "authenticate_user", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def authenticate_user(self, jira_email: str, jira_token: str, jira_domain: str, db: Session)/", "language": "Python", "typeref": "typename:Tuple[bool,Optional[str],Optional[str]]", "kind": "member", "signature": "(self, jira_email: str, jira_token: str, jira_domain: str, db: Session)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "cleanup_expired_sessions", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def cleanup_expired_sessions(self, db: Session) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "member", "signature": "(self, db: Session)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "decrypt_token", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def decrypt_token(self, encrypted_token: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, encrypted_token: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "encrypt_token", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def encrypt_token(self, token: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, token: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "generate_session_token", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def generate_session_token(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "get_jira_service", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def get_jira_service(self, session: UserSession) -> JiraService:$/", "language": "Python", "typeref": "typename:JiraService", "kind": "member", "signature": "(self, session: UserSession)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "get_session", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def get_session(self, session_token: str, db: Session) -> Optional[UserSession]:$/", "language": "Python", "typeref": "typename:Optional[UserSession]", "kind": "member", "signature": "(self, session_token: str, db: Session)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "invalidate_session", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def invalidate_session(self, session_token: str, db: Session) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, session_token: str, db: Session)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "refresh_session", "path": "/home/kavia/workspace/code-generation/jira-issue-export-import-tool-26429a48/jira_syncer_backend/src/auth_service.py", "pattern": "/^    def refresh_session(self, session_token: str, db: Session) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, session_token: str, db: Session)", "scope": "AuthService", "scopeKind": "class"}], "hash": "000a45c946a48c79c68ca456d5768c96", "format-version": 4, "code-base-name": "jira_syncer_backend", "filename": "jira_syncer_backend/src/auth_service.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"19": ""}]}